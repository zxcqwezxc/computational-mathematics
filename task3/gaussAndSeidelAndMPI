import java.util.Arrays;
import java.util.DoubleSummaryStatistics;
import java.util.LinkedList;

/* ‚Ññ1 –ú–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞ –Ω–∞–π–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –°–õ–ê–£
   ‚Ññ2 –î–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ª–∏–Ω–µ–π–Ω—ã—Ö –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞–º–∏ –ø—Ä–æ—Å—Ç–æ–π
–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥–æ–º –ó–∞–π–¥–µ–ª—è. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–ª—è
–∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ ùúÄùëõ –Ω–∞–π–¥–µ—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –°–õ–ê–£.
*/
public class Main {
    static final int exponent = 4;
    public static final double EPS = java.lang.Math.pow(10, (-exponent));
    private static final int L_VALUE = 2;

    public static void main(String[] args) {

        LinkedList<double[][]> firstMatrix = new LinkedList<>();
        firstMatrix.add(
                new double[][]{{2, 2, -1, 1}, {4, 3, -1, 2}, {8, 5, -3, 4}, {3, 3, -2, 2}}
        );
        firstMatrix.add(
                new double[][]{{1, 7, -9, -8}, {-3, -18, 23, 28}, {0, -3, 6, -1}, {-1, -1, 1, 18}}
        );
        firstMatrix.add(
                new double[][]{{3, -3, 7, -4}, {-6, 9, -21, 9}, {9, -12, 30, -22}, {6, 0, 6, -31}}
        );
        firstMatrix.add(
                new double[][]{{9, -5, -6, 3}, {1, -7, 1, 0}, {3, -4, 9, 0}, {6, -1, 9, 8}}
        );
        firstMatrix.add(
                new double[][]{{-6, -5, -3, -8}, {5, -1, -5, -4}, {-6, 0, 5, 5}, {-7, -2, 8, 5}}
        );
        LinkedList<double[]> firstAns = new LinkedList<>();
        firstAns.add(
                new double[]{4, 6, 12, 6}
        );
        firstAns.add(
                new double[]{-7, 5, 8, -29}
        );
        firstAns.add(
                new double[]{0, 9, -2, 37}
        );
        firstAns.add(
                new double[]{-8, 38, 47, -8}
        );
        firstAns.add(
                new double[]{101, 51, -53, -63}
        );


        LinkedList<double[][]> secondMatrix = new LinkedList<>();
        secondMatrix.add(
                new double[][]{{12, -3, -1, 3, -31}, {5, 20, 9, 1, 90}, {6, -3, -21, -7, 119}, {8, -7, 3, -27, 71}}
        );
        secondMatrix.add(
                new double[][]{{28, 9, -3, -7, -159}, {-5, 21, -5, -3, 63}, {-8, 1, -16, 5, -45}, {0, -2, 5, 8, 24}}
        );
        secondMatrix.add(
                new double[][]{{21, 1, -8, 4, -119}, {-9, -23, -2, 4, 79}, {7, -1, -17, 6, -24}, {8, 8, -4, -26, -52}}
        );
        secondMatrix.add(
                new double[][]{{14, -4, -2, 3, 38}, {-3, 23, -6, -9, -195}, {-7, -8, 21, -5, -27}, {-2, -2, 8, 18, 142}}
        );

        gaus(firstMatrix, firstAns);
        System.out.println();
        int n = 1;
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ, –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç.–¥. 1 –∏–ª–∏ 3 —Å–∞–º–æ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ, 2 —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π
        int[] switchNumFirst = {3, 3, 3, 3};
        for (double[][] i : secondMatrix) {
            System.out.println();
            System.out.println("–Ω–æ–º–µ—Ä 2.1." + n);
            //–ø–µ—Ä–µ–¥–∞—é –º–∞—Ç—Ä–∏—Ü—É –∏ –µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è switch
            seidel(i, switchNumFirst[n - 1], 1);
            ++n;
        }

        n = 1;
        //–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
        int[] switchNumSecond = {2, 2, 3, 3};
        for (double[][] i : secondMatrix) {
            System.out.println();
            System.out.println("–Ω–æ–º–µ—Ä 2.1." + n);
            //–ø–µ—Ä–µ–¥–∞—é –º–∞—Ç—Ä–∏—Ü—É –∏ –µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è switch
            seidel(i, switchNumSecond[n - 1], 2);
            ++n;
        }


    }

    // gaus(firstMatrix, firstAns);
    // —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥
    public static void gaus(LinkedList<double[][]> matrix, LinkedList<double[]> rightAns) {
        // n, m —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
        int n = 4;
        int m = 4;
        int num = 1;
        int index = 0;
        double[][] matrixElements = new double[m][m];
        double[] matrixAnswers = new double[m];
        //–±–µ—Ä—É –æ–¥–Ω–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
        for (double[][] mainMatrix : matrix) {
            //–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏
            double[] rightSideOfMatrix = rightAns.get(index);
            index++;
            for (int i = 0; i < n; i++) {
                //0 - –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è m - –¥–ª–∏–Ω–∞
                //–ø–µ—Ä–µ–∫–æ–ø–∏—Ä—É—é –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ –º–∞—Å—Å–∏–≤
                System.arraycopy(mainMatrix[i], 0, matrixElements[i], 0, m);
                matrixAnswers[i] = rightSideOfMatrix[i];
            }

            // –ø—Ä—è–º–æ–π —Ö–æ–¥
            for (int k = 0; k < n; k++) {
                int max = k;
                //–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ i —ç–ª–µ–º–µ–Ω—Ç–µ –∏ –ø–æ–º–µ—â–µ–Ω–∏–µ
                // –µ–≥–æ –Ω–∞–≤–µ—Ä—Ö –¥–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏, –ø–æ—Ç–æ–º =0 –≤—Å–µ –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for (int i = k + 1; i < n; i++) {
                    //–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –±–µ—Ä–µ—Ç—Å—è –æ–Ω
                    if (Math.abs(matrixElements[i][k]) > Math.abs(matrixElements[max][k])) {
                        max = i;
                    }
                }
                //—Å—Ç—Ä–æ—á–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
                double[] temp = matrixElements[k];
                //–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É x
                matrixElements[k] = matrixElements[max];
                matrixElements[max] = temp;
                double t = matrixAnswers[k];
                matrixAnswers[k] = matrixAnswers[max];
                matrixAnswers[max] = t;

                for (int i = k + 1; i < n; i++) {
                    // –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–ª–∏–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ x
                    double alpha = matrixElements[i][k] / matrixElements[k][k];
                    matrixAnswers[i] -= alpha * matrixAnswers[k];
                    for (int j = k; j < n; j++) {
                        matrixElements[i][j] -= alpha * matrixElements[k][j];
                    }
                }
            }
            //–æ–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥
            double[] x = new double[n];
            for (int i = n - 1; i >= 0; i--) {
                double sum = 0.0;
                for (int j = i + 1; j < n; j++) {
                    sum += matrixElements[i][j] * x[j];
                }
                x[i] = (matrixAnswers[i] - sum) / matrixElements[i][i];
            }

            System.out.println("–Ω–æ–º–µ—Ä 1." + num);
            for (int i = 0; i < n; i++) {
                System.out.print("x" + i + " = ");
                System.out.printf("%.2f    ", x[i]);
            }
            System.out.println("\n");
            num++;
        }
    }

    public static void seidel(double[][] fullMatrix, int switchNum, int choose) {
        double[][] currFullMatrix;
        double[] rightAns;
        double[] currentValue = {0, 0, 0, 0};
        double[] nextValue = {0, 0, 0, 0};
        int amountUnknowns = 4;
        double sum;
        rightAns = new double[amountUnknowns];
        currFullMatrix = new double[amountUnknowns][amountUnknowns];
        //–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–æ–≤—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
        for (int i = 0; i < amountUnknowns; i++) {
            for (int j = 0; j <= amountUnknowns; j++) {
                //—Å–∞–º–∞ –º–∞—Ç—Ä–∏—Ü–∞
                if (j != amountUnknowns) {
                    currFullMatrix[i][j] = fullMatrix[i][j];
                    //–æ—Ç–≤–µ—Ç—ã
                } else {
                    rightAns[i] = fullMatrix[i][j];
                }
            }
        }

        double buffNorm;

        // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ x –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        double[] buffDivision = new double[4];
        for (int i = 0; i < amountUnknowns; i++) {
            buffDivision[i] = currFullMatrix[i][i];
        }
        int iter = 0;
        do {
            System.arraycopy(nextValue, 0, currentValue, 0, 4);
            for (int i = 0; i < amountUnknowns; i++) {
                sum = 0;
                for (int j = 0; j < amountUnknowns; j++) {
                    if (j != i) {
                        // –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        if (choose == 2) {
                            //—Å—É–º–º–∞ –≤—Å–µ—Ö –∏–∫—Å–æ–≤ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                            // –≤ –º–µ—Ç–æ–¥–µ –ó–∞–π–¥–µ–ª—è –∫–æ–≥–¥–∞ –º—ã –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –º—ã –ø–æ—Ç–æ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
                            // currentValue[j] –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–æ–≤–∞—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è
                            if (i > 0) {
                                currentValue[i - 1] = nextValue[i - 1];
                            }
                        }
                        //—Å—É–º–º–∞ –≤—Å–µ—Ö –∏–∫—Å–æ–≤ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        sum += currFullMatrix[i][j] * currentValue[j];
                    }
                }
                //—Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ (–æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–≤–Ω–æ - —Å—É–º–º—É –∏–∫—Å–æ–≤) / –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ª–∏—Ç–µ–ª—å
                nextValue[i] = (rightAns[i] - sum) / buffDivision[i];
            }
            // –±—É—Ñ–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å eps
            buffNorm = calculatingTheNorm(currentValue, nextValue, switchNum);
            iter++;
        } while (buffNorm > EPS);
        for (int i = 0; i < currentValue.length; i++) {
            System.out.print("x" + (i + 1) + " = ");
            System.out.printf("%." + exponent + "f    ", currentValue[i]);
        }
        System.out.println();
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π " + iter);
    }

    public static double calculatingTheNorm(double[] currentValue, double[] nextValue, int num) {
        double norm = 0;
        int size = currentValue.length;
        switch (num) {
            // –î–ª—è –Ω–æ—Ä–º—ã ||X||–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
            case (1) -> {
                double[] values = new double[size];
                for (int i = 0; i < size; ++i) {
                    values[i] = Math.abs(nextValue[i] - currentValue[i]);
                }
                DoubleSummaryStatistics stat = Arrays.stream(values).summaryStatistics();
                return stat.getMax();
            }
            // –î–ª—è –Ω–æ—Ä–º—ã ||X||l
            case (2) -> {
                for (int i = 0; i < size; ++i) {
                    norm += Math.abs(nextValue[i] - currentValue[i]);
                }
                return norm;
            }
            // –î–ª—è –Ω–æ—Ä–º—ã ||X||2l
            case (3) -> {
                for (int i = 0; i < size; ++i) {
                    norm += Math.pow(nextValue[i] - currentValue[i], 2 * L_VALUE);
                }
                return Math.pow(norm, 1. / (2 * L_VALUE));
            }
        }
        return 0;
    }
}
