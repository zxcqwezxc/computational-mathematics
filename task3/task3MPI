import java.util.Arrays;
import java.util.DoubleSummaryStatistics;
import java.util.LinkedList;
import java.util.List;

public class Main {

    final static double EPS = Math.pow(10, -3);
    final static int L = 2;
    static final String[] normList = new String[]{"||X||∞", "||X||₁", "||X||₂ₗ"};

    public static void main(String[] args) {

        int k = 1;

        //МПИ в общем виде: x(p+1) = Bx(p) + ф, p = 0,1,...,

        System.out.println("МПИ\n");

        List<double[][]> eqs2 = new LinkedList<>();
        eqs2.add(
                new double[][]{{12, -3, -1, 3, -31}, {5, 20, 9, 1, 90}, {6, -3, -21, -7, 119}, {8, -7, 3, -27, 71}}
        );
        eqs2.add(
                new double[][]{{28, 9, -3, -7, -159}, {-5, 21, -5, -3, 63}, {-8, 1, -16, 5, -45}, {0, -2, 5, 8, 24}}
        );
        eqs2.add(
                new double[][]{{21, 1, -8, 4, -119}, {-9, -23, -2, 4, 79}, {7, -1, -17, 6, -24}, {8, 8, -4, -26, -52}}
        );
        eqs2.add(
                new double[][]{{14, -4, -2, 3, 38}, {-3, 23, -6, -9, -195}, {-7, -8, 21, -5, -27}, {-2, -2, 8, 18, 142}}
        );

        for (double[][] eq : eqs2) {
            System.out.println("\nСистема " + k);
            for (int norm = 1; norm <= 3; norm++) {
                System.out.println("Итерации нормы " + normList[norm - 1] + ": " + simpleIteration(eq, norm));
            }
            k++;
        }
    }

    public static int simpleIteration(double[][] matrix, int norm) {
        int amountOfIterations = 0;
        double[] newX = new double[matrix[0].length - 1];
        double currentEps;
        double[] oldX = new double[newX.length]; // начальные значения равные нулю

        // Заполнение матрицы В
        double[][] B = new double[matrix.length][matrix[0].length - 1];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                if (i == j) {
                    // Диагональный элемент равен 0
                    B[i][j] = 0;
                } else {
                    // Все остальные значения переносятся в левую часть и делятся на диагональный элемент исходной матрицы
                    B[i][j] = -matrix[i][j] / matrix[i][i];
                }
            }
        }
        // Рассчёты
        do {
            for (int i = 0; i < matrix.length; i++) {
                double sum = 0;
                for (int j = 0; j < matrix.length; j++) {
                    sum += B[i][j] * oldX[j]; // сумма по всем столбцам матрицы Б * старый х, то есть (Bx(p))
                }
                // ф это свободный член деленный на диагональный элемент
                newX[i] = sum + matrix[i][matrix[0].length - 1] / matrix[i][i];
            }
            currentEps = findNorm(norm, newX, oldX);
            System.arraycopy(newX, 0, oldX, 0, oldX.length);
            amountOfIterations++;
        } while (currentEps > EPS);
        if(norm == 1) {
            int i = 1;
            for (double x : newX) {

                System.out.println("x" + i + " = " + x);
                i++;
            }
        }
        return amountOfIterations;
    }

    public static double findNorm(int numOfNorm, double[] currentVariableValues, double[] previousVariableValues) {
        double norm = 0;
        int size = currentVariableValues.length;
        switch (numOfNorm) {
            // ||X||∞
            case (1) -> {
                double[] values = new double[size];
                for (int i = 0; i < size; ++i) {
                    values[i] = Math.abs(currentVariableValues[i] - previousVariableValues[i]);
                }
                DoubleSummaryStatistics stat = Arrays.stream(values).summaryStatistics();
                return stat.getMax();
            }
            // ||X||₁
            case (2) -> {
                for (int i = 0; i < size; ++i) {
                    norm += Math.abs(currentVariableValues[i] - previousVariableValues[i]);
                }
                return norm;
            }
            // ||X||₂ₗ
            case (3) -> {
                for (int i = 0; i < size; ++i) {
                    norm += Math.pow(currentVariableValues[i] - previousVariableValues[i], L * 2);
                }
                return Math.pow(norm, 1. / (L * 2));
            }
        }
        return 0;
    }
}
